---
title: "Chapter 3 Vectors"
author: "ADS"
date: "`r format(Sys.Date(), '%d %b %Y')`"
---

The third chapter of [@wickham_advanced_2019].

## 3.1 Basic definitions

Vectors are the key group of data types in R. There is a basic division between atomic vectors
and lists:

- **atomic vector**: all elements have the same type
- **list**: elements can have different types

`NULL` is not a vector, but is often used as a generic zero-length vector.

Vectors can have **attributes**: a named list of metadata. Two of these attributes are widely used:

- **dimension**: by adding dimensions, vectors can be structured as matrices
- **class**: this attribute is central to the S3 object system.

## 3.2 Atomic vectors

Atomic vectors include the following types:

1. logical
2. integer
3. double
4. character (string)
5. complex
6. raw

The first four are common. The types `integer` and `double` are both `numeric`.

The types `complex` and `raw` are used less often. Complex numbers are stored in vectors of type
`complex`, and raw bytes (binary data) are stored in vectors of type `raw`.

### "Scalar" literals

R actually implements single values as vectors of length 1.

```{r}
x <- 1
x[1]

# or even
TRUE[1]
# this one only works in the console
# 1[1]

```

There are literals to represent a vector of length 1 for each type.

- logical: `TRUE` or `FALSE`, or `T` or `F`
- double: decimal `0.1231`, scientific `1.23e4` or hex `0xCAFE`, 
  plus three special values `Inf`, `-Inf`, `NaN`
- integer: decimal `1231L`, scientific `1.23e4L` or hex `0xCAFEL`
- string: double or single quotation marks `"Hi!"`, `'Bye!'`, but double quotes are preferred

```{r}
a <- TRUE
b <- 3.14
c <- 3.14e-1
d <- 0xBEEF
e <- "Hi!"
f <- 'Bye!'

# but be aware that R on Windows doesn't play that nicely with unicode
g <- c("ἄνδρα μοι", "आसीद् राज")


a
b
c
d
e
f
# unicode fail here on Windows, both at the console, in RStudio, and in the printed output of code
# in generated html and pdf documents (using XeLaTex)
g
# see discussion at https://github.com/rstudio/rstudio/issues/4156
#
# Kevin Ushey 2021-02-17 commented:
#
# > In general, the unfortunate truth right now for R on Windows is that you should restrict 
# > yourself to the characters representable in your native locale. Hopefully this will change when
# > (if) R switches to the UCRT, which will imply native support for UTF-8 in R itself.
#
# More detail here: https://github.com/r-windows/docs/blob/master/ucrt.md
# And here:
# https://developer.r-project.org/Blog/public/2020/07/30/windows/utf-8-build-of-r-and-cran-packages/index.html

```

But the unicode prints OK inline: `r g[[1]]`


String content often requires escaping: `?Quotes` gives the details.

Remember here that non-syntactic names can be "escaped" by quoting with backticks: `.2way`.

### Vectors and c()

The combine function `c()` is used to make longer vectors. Applying `typeof()` and `length()` to a
vector generally does what the name of the function suggests.

```{r}

my_vec <- c(TRUE, FALSE, TRUE)

typeof(my_vec)
length(my_vec)


```

Flattening and coercion are important parts of the behaviour of `c()`: `c()` always flattens to an
atomic vector, and there is a hierarchy of type coercion applied.

### Missing values

The use of `NA` to represent missing values is an important feature of R in the context of data
analysis. `NULL` exists, but it is not used to represent missing data.

`NA` is contagious: computations over values including `NA`s will typically return `NA`.

`NA` does NOT equal `NA`: "there is no reason to suppose one missing value has the same value as
another" (Wickham 2019, 43). Use the function `is.NA()` to test for missing values.

```{r}

NA > 2
10 * NA
!NA

# but note these principled exceptions

NA ^ 0
NA | TRUE
NA & FALSE

# using is.na()

x <- c(NA, 5, NA, 6)
x == NA # `==` is vectorised and so you might expect this to work, but it doesn't do what you want
is.na(x)

```

There are underlying specific `NA` values: `NA` itself is logical, but there are `NA_integer_` etc. 
You shouldn't have to deal with this, because of type coercion in R.

### Testing

Test the type of a vector using a function of the pattern `is.*()`, like `is.na()` above, but be
careful.

These work as advertised:

- `is.logical()`
- `is.integer()`
- `is.double()`
- `is.character()`

But these are more complicated:

- `is.vector()`: is.vector returns TRUE if x is a vector of the specified mode having no attributes
  other than names.
- `is.atomic()`: is.atomic is true for the atomic types ("logical", "integer", "numeric", "complex",
  "character" and "raw") and NULL.
- `is.numeric()`: The default method for is.numeric returns TRUE if its argument is of mode 
  "numeric" (type "double" or type "integer") and not a factor, and FALSE otherwise.
  
### Coercion

Atomic vectors have a single type: all elements of the vector are of the same type. When different
types are combined, there is a hierarchy of coercion applied. The highest level wins.

From lowest to highest: logical < integer < double < character.
  
```{r}

c("a", 1)
c("a", TRUE)
c(2.1, 1)
c(2.1, FALSE)
c(1, TRUE)

```

Coercion is often applied automatically. Examples of the pragmatic usefulness of this include using
numerical functions over logical vectors.

```{r}

x <- c(4, 6, 8)
# how many values are greater than 5?
sum(x > 5)
# what proportion of values are greater than 5?
mean(x > 5)


```

Use the `as.*()` group of functions to coerce directly. Failed coercion produces a warning.

```{r}

as.integer(c("1", "1.5", "a"))

```

### 3.2.5 Exercises

#### Question 1

Raw and complex vectors are created with `raw()` and `complex()`.

```{r}

raw_x <- raw(3) # specify the length of the raw vector, initialised with 0
raw_x[1] <- as.raw(40) # convert integer to raw bytes
raw_x[2] <- charToRaw("A")

raw_x # prints as hex values

complex_x <- complex(real = rnorm(10), imaginary = rnorm(10))

complex_x
```

#### Question 2

Predict output of coercion rules.

```{r}

c(1, FALSE) # integer wins: [1] 1 0
c("a", 1) # character wins: [1] "a" "1"
c(TRUE, 1L) # integer wins: [1] 1 1

```

#### Question 3

1. Why is `1 == "1"` true? Coercion of 1 to character.
2. Why is `-1 < FALSE` true? Coercion of FALSE to integer.
3. Why is `"one" < 2` false? The number 2 is coerced here to "2" which sorts after "one".

#### Question 4

The default missing value is a logical vector, because logical is at the base of the hierarchy of
type coercion: a logical NA can be coerced up the hierarchy however required.

#### Question 5

- `is.vector()`: is.vector returns TRUE if x is a vector of the specified mode having no attributes
  other than names.
- `is.atomic()`: is.atomic is true for the atomic types ("logical", "integer", "numeric", "complex",
  "character" and "raw") and NULL.
- `is.numeric()`: The default method for is.numeric returns TRUE if its argument is of mode 
  "numeric" (type "double" or type "integer") and not a factor, and FALSE otherwise.


## 3.3 Attributes

Data structures like matrices, arrays, factors and datetimes are built up on
top of the atomic vectors with attributes.

Attributes
:   Name-value pairs that add metadata to an R object.

Use `attr()`, `attributes()` and `structure()` to retrieve and set attributes.

```{r}
a <- 1:5
attr(a, "attr_1") <- "The first attribute"
attr(a, "attr_1")

str(attributes(a))
```

Note that most operations on vectors destroy attributes, except for `names` and
`dim`.

The attributes mechanism is used to create S3 classes: see Ch. 13.

The most common attribute is `names`. Don't use `attr()` for this, since there
are specific helper functions.

```{r}
# Add names on creation
x <- c(first = 1, second = 2, third = 3)
# Or set using names()
names(x) <- c("f1rst", "s3cond", "th1rd")
```

Any kind of uniqueness or presence in `names` is not enforced by R.

The second common attribute is `dim`. This enables a vector to become a matrix
(2d) or an array (multidimensional).

A vector doesn't have a `dim` attribute, but you can have a 1d matrix or array.

### 3.3.4 Exercises

#### Question 1

`setNames()` is implemented in terms of `names()`:

```
function (object = nm, nm) 
{
    names(object) <- nm
    object
}
```

`unname()` is also implemented in terms of `names()` although it also accounts
for the case of matrices and arrays (and data frames) where the function 
`dimnames` is defined.

```
function (obj, force = FALSE) 
{
    if (!is.null(names(obj))) 
        names(obj) <- NULL
    if (!is.null(dimnames(obj)) && (force || !is.data.frame(obj))) 
        dimnames(obj) <- NULL
    obj
}
```

#### Question 2

`dim()` returns `NULL` when applied to a 1d vector.

```{r}
v1 <- 1:10
dim(v1)
```

One might use `NROW()` or `NCOL()` instead of `nrow()` or `ncol()` to avoid 
getting a NULL value in return (i.e. by treating the input as if it is a 
column vector instead of a regular atomic vector).

```{r}
a1 <- numeric() # a 0-length vector
ncol(a1)
NCOL(a1)
```

#### Question 3

```{r}
x1 <- array(1:5, c(1, 1, 5))
x2 <- array(1:5, c(1, 5, 1))
x3 <- array(1:5, c(5, 1, 1))
```

These are all different from `1:5` because they have a `dim` attribute, even 
though all of these are still 1-dimensional.

A good analogue here is the `x`, `y` and `z` of a 3d solid: `x1` is the 
dimension along the x-axis, `x2` is the dimension along the y-axis, and `x3`
is the dimension along the z-axis.

#### Question 4

From the docs for `attributes`:

> Note that some attributes (namely `class`, `comment`, `dim`, `dimnames`, `names`, 
> `row.names` and `tsp`) are treated specially and have restrictions on the values 
> which can be set.

This points the way to the docs for `comment`:

> Contrary to other `attributes`, the comment is not printed (by `print` or
> `print.default`).

## 3.4 S3 atomic vectors


## 3.5 Lists



## 3.6 Data frames and tibbles


## 3.7 NULL



