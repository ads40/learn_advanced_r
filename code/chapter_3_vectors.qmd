---
title: "Chapter 3 Vectors"
author: "ADS"
date: "`r format(Sys.Date(), '%d %b %Y')`"
---

This is the third chapter of [@wickham_advanced_2019].

## 3.1 Basic definitions

Vectors are the key group of data types in R. There is a basic division between atomic vectors
and lists:

- **atomic vector**: all elements have the same type
- **list**: elements can have different types

`NULL` is not a vector, but is often used as a generic zero-length vector.

Vectors can have **attributes**: a named list of metadata. Two of these attributes are widely used:

- **dimension**: by adding dimensions, vectors can be structured as matrices
- **class**: this attribute is central to the S3 object system.

## 3.2 Atomic vectors

Atomic vectors include the following types:

1. logical
2. integer
3. double
4. character (string)
5. complex
6. raw

The first four are common. The types `integer` and `double` are both `numeric`.

The types `complex` and `raw` are used less often. Complex numbers are stored in vectors of type
`complex`, and raw bytes (binary data) are stored in vectors of type `raw`.

### "Scalar" literals

R actually implements single values as vectors of length 1.

```{r}
x <- 1
x[1]

# or even
TRUE[1]
# this one only works in the console
# 1[1]

```

There are literals to represent a vector of length 1 for each type.

- logical: `TRUE` or `FALSE`, or `T` or `F`
- double: decimal `0.1231`, scientific `1.23e4` or hex `0xCAFE`, 
  plus three special values `Inf`, `-Inf`, `NaN`
- integer: decimal `1231L`, scientific `1.23e4L` or hex `0xCAFEL`
- string: double or single quotation marks `"Hi!"`, `'Bye!'`, but double quotes are preferred

```{r}
a <- TRUE
b <- 3.14
c <- 3.14e-1
d <- 0xBEEF
e <- "Hi!"
f <- 'Bye!'

# but be aware that R on Windows doesn't play that nicely with unicode
g <- c("ἄνδρα μοι", "आसीद् राज")


a
b
c
d
e
f
# unicode fail here on Windows, both at the console, in RStudio, and in the printed output of code
# in generated html and pdf documents (using XeLaTex)
g
# see discussion at https://github.com/rstudio/rstudio/issues/4156
#
# Kevin Ushey 2021-02-17 commented:
#
# > In general, the unfortunate truth right now for R on Windows is that you should restrict 
# > yourself to the characters representable in your native locale. Hopefully this will change when
# > (if) R switches to the UCRT, which will imply native support for UTF-8 in R itself.
#
# More detail here: https://github.com/r-windows/docs/blob/master/ucrt.md
# And here:
# https://developer.r-project.org/Blog/public/2020/07/30/windows/utf-8-build-of-r-and-cran-packages/index.html

```

But the unicode prints OK inline: `r g[[1]]`


String content often requires escaping: `?Quotes` gives the details.

Remember here that non-syntactic names can be "escaped" by quoting with backticks: `.2way`.

### Vectors and c()

The combine function `c()` is used to make longer vectors. Applying `typeof()` and `length()` to a
vector generally does what the name of the function suggests.

```{r}

my_vec <- c(TRUE, FALSE, TRUE)

typeof(my_vec)
length(my_vec)


```

Flattening and coercion are important parts of the behaviour of `c()`: `c()` always flattens to an
atomic vector, and there is a hierarchy of type coercion applied.

### Missing values

The use of `NA` to represent missing values is an important feature of R in the context of data
analysis. `NULL` exists, but it is not used to represent missing data.

`NA` is contagious: computations over values including `NA`s will typically return `NA`.

`NA` does NOT equal `NA`: "there is no reason to suppose one missing value has the same value as
another" (Wickham 2019, 43). Use the function `is.NA()` to test for missing values.

```{r}

NA > 2
10 * NA
!NA

# but note these principled exceptions

NA ^ 0
NA | TRUE
NA & FALSE

# using is.na()

x <- c(NA, 5, NA, 6)
x == NA # `==` is vectorised and so you might expect this to work, but it doesn't do what you want
is.na(x)

```

There are underlying specific `NA` values: `NA` itself is logical, but there are `NA_integer_` etc. 
You shouldn't have to deal with this, because of type coercion in R.

### Testing

Test the type of a vector using a function of the pattern `is.*()`, like `is.na()` above, but be
careful.

These work as advertised:

- `is.logical()`
- `is.integer()`
- `is.double()`
- `is.character()`

But these are more complicated:

- `is.vector()`: is.vector returns TRUE if x is a vector of the specified mode having no attributes
  other than names.
- `is.atomic()`: is.atomic is true for the atomic types ("logical", "integer", "numeric", "complex",
  "character" and "raw") and NULL.
- `is.numeric()`: The default method for is.numeric returns TRUE if its argument is of mode 
  "numeric" (type "double" or type "integer") and not a factor, and FALSE otherwise.
  
### Coercion

Atomic vectors have a single type: all elements of the vector are of the same type. When different
types are combined, there is a hierarchy of coercion applied. The highest level wins.

From lowest to highest: logical < integer < double < character.
  
```{r}

c("a", 1)
c("a", TRUE)
c(2.1, 1)
c(2.1, FALSE)
c(1, TRUE)

```

Coercion is often applied automatically. Examples of the pragmatic usefulness of this include using
numerical functions over logical vectors.

```{r}

x <- c(4, 6, 8)
# how many values are greater than 5?
sum(x > 5)
# what proportion of values are greater than 5?
mean(x > 5)


```

Use the `as.*()` group of functions to coerce directly. Failed coercion produces a warning.

```{r}

as.integer(c("1", "1.5", "a"))

```

### 3.2.5 Exercises

#### Question 1

Raw and complex vectors are created with `raw()` and `complex()`.

```{r}

raw_x <- raw(3) # specify the length of the raw vector, initialised with 0
raw_x[1] <- as.raw(40) # convert integer to raw bytes
raw_x[2] <- charToRaw("A")

raw_x # prints as hex values

complex_x <- complex(real = rnorm(10), imaginary = rnorm(10))

complex_x
```

#### Question 2

Predict output of coercion rules.

```{r}

c(1, FALSE) # integer wins: [1] 1 0
c("a", 1) # character wins: [1] "a" "1"
c(TRUE, 1L) # integer wins: [1] 1 1

```

#### Question 3

1. Why is `1 == "1"` true? Coercion of 1 to character.
2. Why is `-1 < FALSE` true? Coercion of FALSE to integer.
3. Why is `"one" < 2` false? The number 2 is coerced here to "2" which sorts after "one".

#### Question 4

The default missing value is a logical vector, because logical is at the base of the hierarchy of
type coercion: a logical NA can be coerced up the hierarchy however required.

#### Question 5

- `is.vector()`: is.vector returns TRUE if x is a vector of the specified mode having no attributes
  other than names.
- `is.atomic()`: is.atomic is true for the atomic types ("logical", "integer", "numeric", "complex",
  "character" and "raw") and NULL.
- `is.numeric()`: The default method for is.numeric returns TRUE if its argument is of mode 
  "numeric" (type "double" or type "integer") and not a factor, and FALSE otherwise.


## 3.3 Attributes

Data structures like matrices, arrays, factors and datetimes are built up on
top of the atomic vectors with attributes.

Attributes
:   Name-value pairs that add metadata to an R object.

Use `attr()`, `attributes()` and `structure()` to retrieve and set attributes.

```{r}
a <- 1:5
attr(a, "attr_1") <- "The first attribute"
attr(a, "attr_1")

str(attributes(a))
```

Note that most operations on vectors destroy attributes, except for `names` and
`dim`.

The attributes mechanism is used to create S3 classes: see Ch. 13.

The most common attribute is `names`. Don't use `attr()` for this, since there
are specific helper functions.

```{r}
# Add names on creation
x <- c(first = 1, second = 2, third = 3)
# Or set using names()
names(x) <- c("f1rst", "s3cond", "th1rd")
```

Any kind of uniqueness or presence in `names` is not enforced by R.

The second common attribute is `dim`. This enables a vector to become a matrix
(2d) or an array (multidimensional).

A vector doesn't have a `dim` attribute, but you can have a 1d matrix or array.

### 3.3.4 Exercises

#### Question 1

`setNames()` is implemented in terms of `names()`:

```
function (object = nm, nm) 
{
    names(object) <- nm
    object
}
```

`unname()` is also implemented in terms of `names()` although it also accounts
for the case of matrices and arrays (and data frames) where the function 
`dimnames` is defined.

```
function (obj, force = FALSE) 
{
    if (!is.null(names(obj))) 
        names(obj) <- NULL
    if (!is.null(dimnames(obj)) && (force || !is.data.frame(obj))) 
        dimnames(obj) <- NULL
    obj
}
```

#### Question 2

`dim()` returns `NULL` when applied to a 1d vector.

```{r}
v1 <- 1:10
dim(v1)
```

One might use `NROW()` or `NCOL()` instead of `nrow()` or `ncol()` to avoid 
getting a NULL value in return (i.e. by treating the input as if it is a 
column vector instead of a regular atomic vector).

```{r}
a1 <- numeric() # a 0-length vector
ncol(a1)
NCOL(a1)
```

#### Question 3

```{r}
x1 <- array(1:5, c(1, 1, 5))
x2 <- array(1:5, c(1, 5, 1))
x3 <- array(1:5, c(5, 1, 1))
```

These are all different from `1:5` because they have a `dim` attribute, even 
though all of these are still 1-dimensional.

A good analogue here is the `x`, `y` and `z` of a 3d solid: `x1` is the 
dimension along the x-axis, `x2` is the dimension along the y-axis, and `x3`
is the dimension along the z-axis.

#### Question 4

From the docs for `attributes`:

> Note that some attributes (namely `class`, `comment`, `dim`, `dimnames`, `names`, 
> `row.names` and `tsp`) are treated specially and have restrictions on the values 
> which can be set.

This points the way to the docs for `comment`:

> Contrary to other `attributes`, the comment is not printed (by `print` or
> `print.default`).

## 3.4 S3 atomic vectors

The attribute `class` is a key part of the S3 object system. S3 objects have a
base vector type (the value of `typeof()`, which can be confusing when new to
R) and then further metadata in attributes.

Consider a factor:

```{r}
x <- factor(c("a", "b", "b", "a"))
x
# Contrast the base vector type
typeof(x)
# with the value of the class attribute
attributes(x)$class
```

Since factors are built on top of integer vectors, treating factors as strings
can be hazardous (will there be coercion? how or how not?), so explicit
conversion is always a better idea.

Dates and date-times are built on top of double vectors, and represent the
dates and date-times as the number of days or seconds since the Unix epoch date:
1970-01-01.

Dates are difficult enough in practice that it is usually a good idea to use
the functions of the `lubridate` package to take advantage of its well thought
through API.

### 3.4.5 Exercises

#### Question 1

`table()` returns a contingency table as an array with `class` "table". Its type
is "integer" since it is an integer vector with added dimensions, dimension
names and the `class` attribute "table". Added variables add an extra dimension
of `dimnames`.

#### Question 2

What happens when the levels of a factor are modified?

```{r}
f1 <- factor(letters)
f1
as.integer(f1)
levels(f1) <- rev(levels(f1))
f1
as.integer(f1)
```

This shows that the integer representation remains the same, but the change to
the levels makes it look like the data itself has changed.

## 3.5 Lists

Lists consists of references to other objects. This means that lists can contain
elements of any type. The size of the list may be smaller than expected as a
result.

Note that lists can contain other lists. The `list()` function preserves
structures but `c()` flattens. Dimensions can be used to create higher 
dimensional lists.

### 3.5.4 Exercises

#### Question 1

Homogeneity versus heterogeneity. Single reference to memory versus a collection
of references. Different out-of-bounds behaviours.

#### Question 2

Lists are a kind of vector. `as.vector()` and `is.vector()` have different
definitions in play

#### Question 3

Differences: `c()` coerces types and removes time zones but `unlist()` removes
attributes.

## 3.6 Data frames and tibbles

A data frame is:

- a named list of vectors
- with attributes for names, row.names, and class "data.frame"
- with the constraint that the vectors must be the same length

Note these functions:

- `names()` == `colnames()`
- `rownames()`
- `nrow()`
- `length()` == `ncol()`

Data frames are a very important idea and crucial for the use of R for data
science. But there are rough edges, and so the Tidyverse layers the `tibble` on
top of `data.frame` in order to smooth these edges out.

Importantly, a tibble never coerces its input (as data frames do by default for
strings into factors).

Avoid vector recycling when constructing data frames or tibbles: be explicit.

Note the important advice to avoid row names given by Hadley Wickham in this
section [-@wickham_advanced_2019, section 3.6]:

> There are three reasons why row names are undesirable:
>
> Metadata is data, so storing it in a different way to the rest of the data is
> fundamentally a bad idea. It also means that you need to learn a new set of
> tools to work with row names; you can’t use what you already know about
> manipulating columns.
>
> Row names are a poor abstraction for labelling rows because they only work when
> a row can be identified by a single string. This fails in many cases, for
> example when you want to identify a row by a non-character vector (e.g. a time
> point), or with multiple vectors (e.g. position, encoded by latitude and
> longitude).
> 
> Row names must be unique, so any duplication of rows (e.g. from bootstrapping)
> will create new row names. If you want to match rows from before and after the
> transformation, you’ll need to perform complicated string surgery.

Therefore, row names are not supported by tibbles: convert any row names into a
column using `rownames_to_column()` or `as.tibble(rownames = ...)`.

### Subsetting

Subsetting is an important part of using data frames in R, but again there are
rough edges in base R implementation, when the return value can be hard to 
product. Again tibbles guard against these rough edges.

- `[` always returns a tibble.
- `$` doesn't do partial matching and warns if a variable can't be found.

This causes one point of confusion which should be noted.

Base R often uses `df[, "col"]` to extract a single column as a vector, but this
same idiom will return a tibble when applied to a tibble. You should instead 
use `df[["col"]]` to express your meaning more clearly (which works with data
frames and with tibbles).

### List-columns

Since data frames are lists, it is also possible to have a column that is itself
a list: you can include any object in a data frame, therefore, and this is often
used when storing the output of a model. Tibbles behave more helpfully than
base R data frames when working with list-columns.

### 3.6.8 Exercises

#### Question 1

Can you have a data frame with zero rows? What about zero columns?

Yes, it is possible to have a data frame with zero columns and zero rows.

```{r}
df <- data.frame(NULL)
df
```

#### Question 2

What happens if you attempt to set row names that are not unique?

This will raise an error: "duplicate row.names: ..."

#### Question 3

If `df` is a data frame, what can you say about `t(df)`, and `t(t(df))`? Perform
some experiments, making sure to try different column types.

`t()` is the matrix transpose function, but it will also transpose data frames
(after turning them into matrices).

This will presumably only make any sense in certain contexts and it seems that
weird coercions will take place if columns of different types are involved.

```{r}
df4 <- data.frame(
  x = 1:3,
  y = c("a", "b", "c")
)
df4
t(df4)

df5 <- data.frame(
  x = 1:3,
  y = 4:6
)
df5
t(df5)
t(t(df5))
```


#### Question 4

What does `as.matrix() `do when applied to a data frame with columns of 
different types? How does it differ from `data.matrix()`?

Not considered.

## 3.7 NULL

Wickham [-@wickham_advanced_2019, section 3.7] points to two common uses for
`NULL`:

1. To represent an empty vector (length zero) of arbitrary type.
2. To represent an absent vector (e.g. as default function argument).

Note that SQL's database `NULL` is equivalent to R's `NA`: these represent a
missing element in a vector.


## References




